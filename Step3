/*Author: Afag Rizayeva
  Date:11-January-2022
  Purpose: 1. Merge the separate exported texture layers into one for each of the chosen second-order texture metrics:
              Angular Second Moment
              Entropy
              Homogeneity

  Usage: Convert the code naming in the code to your corresponding Corona image by pressing Ctrl+F twice
        and entering "10111040" without quotes in the first line and "your Corona image code" in the second line
          
        Create a geometry corresponding to your region
          
        Then run the code and excuate "RUN" in the Tasks tab to export the results into GLCM folder in your assets
        Based on the following code, you should have 6 total processes to execute (two per each second-order texture metric)
          
  Parameters: 
              assetId: the directory where you store your separate texture layers exported earlier to be merged by this code
              geometry:
*/

var geometry = ee.FeatureCollection('users/rizayeva/DS1011-1040');
Map.addLayer(geometry);

//ASM_DA
var imageVisParam = {bands: ['ds10111040da_asm'], min: 0.015071922070983398, max: 0.06105865647962591,  gamma: [1]};
var assetId='users/rizayeva/GLCM_ASM_DA_10111040'

// //Make a list that contains all the imagery in the asset directory
var assetList = ee.List(ee.data.getList({'id':assetId}))
// print(assetList)
var n=assetList.size().getInfo()

//Generate a imagery collection that contains all the land cover maps on the list
var listocollection = function(assetList,size){
  var col=ee.ImageCollection([]);
  for (var i=0; i<size; i++){
    var value=ee.Dictionary(assetList.get(i))
    var imgID=ee.String(value.get('id')).getInfo()
    var imgs=ee.Image(imgID)
    col=col.merge(imgs)
  }
  return col;
}

var collection=listocollection(assetList,n);
print('AngularSecondMomentDA', collection)

var angularSecondMoment_DA = collection.mosaic();
print(angularSecondMoment_DA);
// Map.addLayer(angularSecondMoment_DF, imageVisParam, 'angularSecondMoment_DF');
Map.addLayer(angularSecondMoment_DA, imageVisParam, 'angularSecondMoment_DA');

Export.image.toAsset({
  image: angularSecondMoment_DA,
  description: "angularSecondMoment_DA_10111040",
  assetId: 'GLCM/angularSecondMoment_DA_10111040',
  scale: 2.5,
  region: geometry,
  maxPixels:1e13,
});


//ASM_DF
var imageVisParam = {bands: ['ds10111040df_asm'], min: 0.015071922070983398, max: 0.06105865647962591,  gamma: [1]};
var assetId='users/rizayeva/GLCM_ASM_DF_10111040'

// //Make a list that contains all the imagery in the asset directory
var assetList = ee.List(ee.data.getList({'id':assetId}))
// print(assetList)
var n=assetList.size().getInfo()

//Generate a imagery collection that contains all the land cover maps on the list
var listocollection = function(assetList,size){
  var col=ee.ImageCollection([]);
  for (var i=0; i<size; i++){
    var value=ee.Dictionary(assetList.get(i))
    var imgID=ee.String(value.get('id')).getInfo()
    var imgs=ee.Image(imgID)
    col=col.merge(imgs)
  }
  return col;
}

var collection=listocollection(assetList,n);
print('AngularSecondMomentDF', collection)

var angularSecondMoment_DF = collection.mosaic();
print(angularSecondMoment_DF);
// Map.addLayer(angularSecondMoment_DF, imageVisParam, 'angularSecondMoment_DF');
Map.addLayer(angularSecondMoment_DF, imageVisParam, 'angularSecondMoment_DF');

Export.image.toAsset({
  image: angularSecondMoment_DF,
  description: "angularSecondMoment_DF_10111040",
  assetId: 'GLCM/angularSecondMoment_DF_10111040',
  scale: 2.5,
  region: geometry,
  maxPixels:1e13,
});

//imageVisParam

//ENT_DA
var imageVisParam = {bands: ['ds10111040da_ent'], min: 3.0209101473712536, max: 3.9960161288948637,  gamma: [1]};
var assetId='users/rizayeva/GLCM_ENT_DA_10111040'

// //Make a list that contains all the imagery in the asset directory
var assetList = ee.List(ee.data.getList({'id':assetId}))
// print(assetList)
var n=assetList.size().getInfo()

//Generate a imagery collection that contains all the land cover maps on the list
var listocollection = function(assetList,size){
  var col=ee.ImageCollection([]);
  for (var i=0; i<size; i++){
    var value=ee.Dictionary(assetList.get(i))
    var imgID=ee.String(value.get('id')).getInfo()
    var imgs=ee.Image(imgID)
    col=col.merge(imgs)
  }
  return col;
}

var collection=listocollection(assetList,n);
print('EntropyDA', collection)

var entropy_DA = collection.mosaic();
print(entropy_DA);
// Map.addLayer(entropy_DA, imageVisParam, 'entropy_DA');
Map.addLayer(entropy_DA, imageVisParam, 'entropy_DA');

Export.image.toAsset({
  image: entropy_DA,
  description: "entropy_DA_10111040",
  assetId: 'GLCM/entropy_DA_10111040',
  scale: 2.5,
  region: geometry,
  maxPixels:1e13,
});


//ENT_DF
var imageVisParam = {bands: ['ds10111040df_ent'], min: 3.0209101473712536, max: 3.9960161288948637,  gamma: [1]};
var assetId='users/rizayeva/GLCM_ENT_DF_10111040'

// //Make a list that contains all the imagery in the asset directory
var assetList = ee.List(ee.data.getList({'id':assetId}))
// print(assetList)
var n=assetList.size().getInfo()

//Generate a imagery collection that contains all the land cover maps on the list
var listocollection = function(assetList,size){
  var col=ee.ImageCollection([]);
  for (var i=0; i<size; i++){
    var value=ee.Dictionary(assetList.get(i))
    var imgID=ee.String(value.get('id')).getInfo()
    var imgs=ee.Image(imgID)
    col=col.merge(imgs)
  }
  return col;
}

var collection=listocollection(assetList,n);
print('EntropyDF', collection)

var entropy_DF = collection.mosaic();
print(entropy_DF);
// Map.addLayer(entropy_DF, imageVisParam, 'entropy_DF');
Map.addLayer(entropy_DF, imageVisParam, 'entropy_DF');

Export.image.toAsset({
  image: entropy_DF,
  description: "entropy_DF_10111040",
  assetId: 'GLCM/entropy_DF_10111040',
  scale: 2.5,
  region: geometry,
  maxPixels:1e13,
});


//HOM_DA
var imageVisParam = {bands: ['ds10111040da_idm'], min: 0.10173501666498017, max: 0.49671797626021486,  gamma: [1]};
var assetId='users/rizayeva/GLCM_HOM_DA_10111040'

// //Make a list that contains all the imagery in the asset directory
var assetList = ee.List(ee.data.getList({'id':assetId}))
// print(assetList)
var n=assetList.size().getInfo()

//Generate a imagery collection that contains all the land cover maps on the list
var listocollection = function(assetList,size){
  var col=ee.ImageCollection([]);
  for (var i=0; i<size; i++){
    var value=ee.Dictionary(assetList.get(i))
    var imgID=ee.String(value.get('id')).getInfo()
    var imgs=ee.Image(imgID)
    col=col.merge(imgs)
  }
  return col;
}

var collection=listocollection(assetList,n);
print('HomogeneityDA', collection)

var homogeneity_DA = collection.mosaic();
print(homogeneity_DA);
// Map.addLayer(homogeneity_DA, imageVisParam, 'homogeneity_DA');
Map.addLayer(homogeneity_DA, imageVisParam, 'homogeneity_DA');

Export.image.toAsset({
  image: homogeneity_DA,
  description: "homogeneity_DA_10111040",
  assetId: 'GLCM/homogeneity_DA_10111040',
  scale: 2.5,
  region: geometry,
  maxPixels:1e13,
});


//HOM_DF
var imageVisParam = {bands: ['ds10111040df_idm'], min: 0.10173501666498017, max: 0.49671797626021486,  gamma: [1]};
var assetId='users/rizayeva/GLCM_HOM_DF_10111040'
var n=assetList.size().getInfo()

// //Make a list that contains all the imagery in the asset directory
var assetList = ee.List(ee.data.getList({'id':assetId}))
// print(assetList)

//Generate a imagery collection that contains all the land cover maps on the list
var listocollection = function(assetList,size){
  var col=ee.ImageCollection([]);
  for (var i=0; i<size; i++){
    var value=ee.Dictionary(assetList.get(i))
    var imgID=ee.String(value.get('id')).getInfo()
    var imgs=ee.Image(imgID)
    col=col.merge(imgs)
  }
  return col;
}

var collection=listocollection(assetList,n);
print('HomogeneityDF', collection)

var homogeneity_DF = collection.mosaic();
print(homogeneity_DF);
// Map.addLayer(homogeneity_DF, imageVisParam, 'homogeneity_DF');
Map.addLayer(homogeneity_DF, imageVisParam, 'homogeneity_DF');

Export.image.toAsset({
  image: homogeneity_DF,
  description: "homogeneity_DF_10111040",
  assetId: 'GLCM/homogeneity_DF_10111040',
  scale: 2.5,
  region: geometry,
  maxPixels:1e13,
});
